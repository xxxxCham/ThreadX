# ThreadX Tkinter Application Launcher
# ===================================
# 
# Script PowerShell pour lancer l'application Tkinter ThreadX sur Windows
# G√®re automatiquement l'environnement virtuel et les d√©pendances
#
# Usage: 
#   .\run_tkinter.ps1
#   .\run_tkinter.ps1 -Debug
#
# Author: ThreadX Framework
# Version: 1.0

param(
    [switch]$Debug,
    [switch]$Help
)

# Configuration des couleurs
$ColorConfig = @{
    Success = "Green"
    Error   = "Red"
    Warning = "Yellow"
    Info    = "Cyan"
    Header  = "Magenta"
}

function Write-ColorMessage {
    param(
        [string]$Message,
        [string]$Color = "White",
        [string]$Icon = ""
    )
    if ($Icon) {
        Write-Host "$Icon " -ForegroundColor $Color -NoNewline
    }
    Write-Host $Message -ForegroundColor $Color
}

function Write-Header {
    param([string]$Title)
    Write-Host ""
    Write-Host "=" * 50 -ForegroundColor $ColorConfig.Header
    Write-Host "  $Title" -ForegroundColor $ColorConfig.Header
    Write-Host "=" * 50 -ForegroundColor $ColorConfig.Header
    Write-Host ""
}

function Test-PathExists {
    param(
        [string]$Path,
        [string]$Description
    )
    if (Test-Path $Path) {
        Write-ColorMessage "‚úÖ $Description trouv√©: $Path" $ColorConfig.Success
        return $true
    }
    else {
        Write-ColorMessage "‚ùå $Description non trouv√©: $Path" $ColorConfig.Error
        return $false
    }
}

function Show-Help {
    Write-Header "ThreadX Tkinter Launcher - Aide"
    Write-Host "Usage:"
    Write-Host "  .\run_tkinter.ps1              # Lancement normal" -ForegroundColor White
    Write-Host "  .\run_tkinter.ps1 -Debug       # Lancement avec mode debug" -ForegroundColor White
    Write-Host "  .\run_tkinter.ps1 -Help        # Afficher cette aide" -ForegroundColor White
    Write-Host ""
    Write-Host "Description:"
    Write-Host "  Lance l'application Tkinter ThreadX avec v√©rifications automatiques" -ForegroundColor Gray
    Write-Host "  - V√©rifie l'environnement virtuel Python" -ForegroundColor Gray
    Write-Host "  - Installe ThreadX si n√©cessaire" -ForegroundColor Gray
    Write-Host "  - V√©rifie les d√©pendances critiques" -ForegroundColor Gray
    Write-Host "  - Test l'authentification API" -ForegroundColor Gray
    Write-Host ""
    exit 0
}

# Afficher l'aide si demand√©e
if ($Help) {
    Show-Help
}

# Configuration des chemins
$ScriptDir = $PSScriptRoot
$ProjectRoot = $ScriptDir
$VenvPath = Join-Path $ProjectRoot ".venv"
$PythonExe = Join-Path $VenvPath "Scripts\python.exe"
$TkinterApp = Join-Path $ProjectRoot "apps\tkinter\run_tkinter.py"

Write-Header "ThreadX Tkinter Application Launcher"

# V√©rifier si on est dans le bon r√©pertoire
$PyProjectPath = Join-Path $ProjectRoot "pyproject.toml"
if (-not (Test-Path $PyProjectPath)) {
    Write-ColorMessage "‚ùå Erreur: pyproject.toml non trouv√©" $ColorConfig.Error
    Write-ColorMessage "   Assurez-vous d'√™tre dans le r√©pertoire racine ThreadX" $ColorConfig.Error
    Write-ColorMessage "   R√©pertoire actuel: $PWD" $ColorConfig.Warning
    Write-ColorMessage "   R√©pertoire attendu: $ProjectRoot" $ColorConfig.Warning
    Read-Host "Appuyez sur Entr√©e pour quitter"
    exit 1
}

# V√©rifications des pr√©requis
Write-ColorMessage "üîç V√©rification des pr√©requis..." $ColorConfig.Info

if (-not (Test-PathExists $VenvPath "Environnement virtuel")) {
    Write-ColorMessage "üí° Cr√©ez l'environnement virtuel:" $ColorConfig.Warning
    Write-ColorMessage "   python -m venv .venv" $ColorConfig.Warning
    Write-ColorMessage "   .venv\Scripts\activate" $ColorConfig.Warning
    Write-ColorMessage "   pip install -e ." $ColorConfig.Warning
    Read-Host "Appuyez sur Entr√©e pour quitter"
    exit 1
}

if (-not (Test-PathExists $PythonExe "Python dans l'environnement virtuel")) {
    Read-Host "Appuyez sur Entr√©e pour quitter"
    exit 1
}

if (-not (Test-PathExists $TkinterApp "Application Tkinter")) {
    Write-ColorMessage "üí° V√©rifiez que le fichier apps\tkinter\run_tkinter.py existe" $ColorConfig.Warning
    Read-Host "Appuyez sur Entr√©e pour quitter"
    exit 1
}

Write-Host ""

# V√©rifier la version de Python
Write-ColorMessage "üêç V√©rification de Python..." $ColorConfig.Info
try {
    $PythonVersion = & $PythonExe --version
    Write-ColorMessage "‚úÖ $PythonVersion" $ColorConfig.Success
}
catch {
    Write-ColorMessage "‚ùå Erreur lors de la v√©rification de Python" $ColorConfig.Error
    Write-ColorMessage $_.Exception.Message $ColorConfig.Error
    Read-Host "Appuyez sur Entr√©e pour quitter"
    exit 1
}

Write-Host ""

# V√©rifier l'installation de ThreadX
Write-ColorMessage "üîç V√©rification de l'installation ThreadX..." $ColorConfig.Info
try {
    $ThreadXCheck = & $PythonExe -c "import threadx; print('‚úÖ ThreadX version:', threadx.__version__)" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-ColorMessage $ThreadXCheck $ColorConfig.Success
    }
    else {
        throw "ThreadX non install√©"
    }
}
catch {
    Write-ColorMessage "‚ö†Ô∏è ThreadX non install√© ou non trouv√©" $ColorConfig.Warning
    Write-ColorMessage "üí° Installation de ThreadX..." $ColorConfig.Warning
    
    try {
        & $PythonExe -m pip install -e .
        if ($LASTEXITCODE -ne 0) {
            throw "√âchec de l'installation"
        }
        Write-ColorMessage "‚úÖ ThreadX install√© avec succ√®s" $ColorConfig.Success
    }
    catch {
        Write-ColorMessage "‚ùå √âchec de l'installation de ThreadX" $ColorConfig.Error
        Read-Host "Appuyez sur Entr√©e pour quitter"
        exit 1
    }
}

Write-Host ""

# V√©rifier les d√©pendances critiques
Write-ColorMessage "üì¶ V√©rification des d√©pendances..." $ColorConfig.Info

$Dependencies = @(
    @{Name = "Tkinter"; ImportTest = "import tkinter; print('‚úÖ Tkinter disponible')"; Required = $true },
    @{Name = "Pandas"; ImportTest = "import pandas; print('‚úÖ Pandas disponible')"; Required = $false },
    @{Name = "NumPy"; ImportTest = "import numpy; print('‚úÖ NumPy disponible')"; Required = $false }
)

foreach ($Dep in $Dependencies) {
    try {
        $Result = & $PythonExe -c $Dep.ImportTest 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorMessage $Result $ColorConfig.Success
        }
        else {
            throw "Import failed"
        }
    }
    catch {
        if ($Dep.Required) {
            Write-ColorMessage "‚ùå $($Dep.Name) non disponible" $ColorConfig.Error
            if ($Dep.Name -eq "Tkinter") {
                Write-ColorMessage "   Tkinter est normalement inclus avec Python" $ColorConfig.Error
                Write-ColorMessage "üí° R√©installez Python avec Tkinter ou installez python-tk" $ColorConfig.Warning
            }
            Read-Host "Appuyez sur Entr√©e pour quitter"
            exit 1
        }
        else {
            Write-ColorMessage "‚ö†Ô∏è $($Dep.Name) non trouv√©, installation..." $ColorConfig.Warning
            try {
                & $PythonExe -m pip install $Dep.Name.ToLower()
                Write-ColorMessage "‚úÖ $($Dep.Name) install√©" $ColorConfig.Success
            }
            catch {
                Write-ColorMessage "‚ùå √âchec installation $($Dep.Name)" $ColorConfig.Error
            }
        }
    }
}

Write-Host ""

# V√©rifier les variables d'environnement (optionnel)
Write-ColorMessage "üîê V√©rification de l'authentification API..." $ColorConfig.Info

if ($env:BINANCE_API_KEY) {
    Write-ColorMessage "‚úÖ BINANCE_API_KEY d√©finie" $ColorConfig.Success
}
else {
    Write-ColorMessage "‚ö†Ô∏è BINANCE_API_KEY non d√©finie (endpoints publics utilis√©s)" $ColorConfig.Warning
}

if ($env:COINGECKO_API_KEY) {
    Write-ColorMessage "‚úÖ COINGECKO_API_KEY d√©finie" $ColorConfig.Success
}
else {
    Write-ColorMessage "‚ö†Ô∏è COINGECKO_API_KEY non d√©finie (limites publiques)" $ColorConfig.Warning
}

# Test d'authentification si disponible
$TestAuthPath = Join-Path $ProjectRoot "test_auth.py"
if (Test-Path $TestAuthPath) {
    Write-ColorMessage "üß™ Test rapide d'authentification..." $ColorConfig.Info
    try {
        & $PythonExe $TestAuthPath --test-only 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-ColorMessage "‚ö†Ô∏è Probl√®mes d'authentification d√©tect√©s" $ColorConfig.Warning
            Write-ColorMessage "üí° Ex√©cutez test_auth.py pour plus de d√©tails" $ColorConfig.Warning
        }
    }
    catch {
        Write-ColorMessage "‚ö†Ô∏è Impossible de tester l'authentification" $ColorConfig.Warning
    }
}

Write-Host ""

# Arguments de ligne de commande
$AppArgs = @()
if ($Debug) {
    $AppArgs += "--debug"
    Write-ColorMessage "üêõ Mode debug activ√©" $ColorConfig.Warning
}

# Changer vers le r√©pertoire du projet
Set-Location $ProjectRoot

# Lancer l'application Tkinter
Write-ColorMessage "üöÄ Lancement de l'application ThreadX Tkinter..." $ColorConfig.Success
Write-ColorMessage "   Python: $PythonExe" $ColorConfig.Info
Write-ColorMessage "   Script: $TkinterApp" $ColorConfig.Info
if ($AppArgs.Count -gt 0) {
    Write-ColorMessage "   Arguments: $($AppArgs -join ' ')" $ColorConfig.Info
}
Write-Host ""

# Afficher les instructions d'utilisation
Write-ColorMessage "üí° Instructions:" $ColorConfig.Warning
Write-ColorMessage "   - L'application va se lancer dans une nouvelle fen√™tre" $ColorConfig.Warning
Write-ColorMessage "   - Fermez cette console pour arr√™ter l'application" $ColorConfig.Warning
Write-ColorMessage "   - Logs visibles dans la console" $ColorConfig.Warning
Write-Host ""

# Attendre un peu pour que l'utilisateur lise les messages
Start-Sleep -Seconds 2

# Lancer l'application
try {
    if ($AppArgs.Count -gt 0) {
        & $PythonExe $TkinterApp $AppArgs
    }
    else {
        & $PythonExe $TkinterApp
    }
    
    $ExitCode = $LASTEXITCODE
    
    Write-Host ""
    if ($ExitCode -ne 0) {
        Write-ColorMessage "‚ùå L'application s'est ferm√©e avec une erreur (code: $ExitCode)" $ColorConfig.Error
        Write-ColorMessage "üí° V√©rifiez les messages d'erreur ci-dessus" $ColorConfig.Warning
        Write-ColorMessage "üí° Pour plus de d√©tails, ex√©cutez:" $ColorConfig.Warning
        Write-ColorMessage "   .\run_tkinter.ps1 -Debug" $ColorConfig.Warning
    }
    else {
        Write-ColorMessage "‚úÖ Application ferm√©e normalement" $ColorConfig.Success
    }
}
catch {
    Write-ColorMessage "‚ùå Erreur lors du lancement de l'application" $ColorConfig.Error
    Write-ColorMessage $_.Exception.Message $ColorConfig.Error
}

Write-Host ""
Write-ColorMessage "üîó Liens utiles:" $ColorConfig.Info
Write-ColorMessage "   - Documentation: README.md" $ColorConfig.Info
Write-ColorMessage "   - Configuration API: .env.example" $ColorConfig.Info
Write-ColorMessage "   - Test authentification: test_auth.py" $ColorConfig.Info
Write-ColorMessage "   - Configuration env: setup_env.ps1" $ColorConfig.Info

Write-Host ""
Read-Host "Appuyez sur Entr√©e pour quitter"