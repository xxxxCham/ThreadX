#!/usr/bin/env python3
"""
Audit ThreadX : Identifie code m√©tier m√©lang√© dans UI
Ex√©cution : python scripts/audit_ui_engine.py
Sortie : AUDIT_THREADX.md
"""

import os
import re
from pathlib import Path
from collections import defaultdict
from datetime import datetime

# Configuration
UI_PATHS = [Path("src/threadx/ui"), Path("apps"), Path("threadx_dashboard")]
OUTPUT_FILE = Path("AUDIT_THREADX.md")

# Imports m√©tier √† rechercher
DANGEROUS_IMPORTS = {
    "create_engine": "Moteur backtest",
    "IndicatorBank": "Banque indicateurs",
    "PerformanceCalculator": "Calcul perf",
    "PerformanceMetrics": "M√©triques perf",
    "IngestionManager": "Ingestion donn√©es",
    "UnifiedOptimizationEngine": "Engine optimisation",
    "DeviceManager": "Gestionnaire GPU",
    "MultiGPUDispatcher": "Dispatcher GPU",
    "BacktestEngine": "Engine backtest",
}

DANGEROUS_MODULES = [
    "threadx.backtest",
    "threadx.indicators",
    "threadx.optimization",
    "threadx.data.ingest",
    "threadx.utils.gpu",
]

# Patterns de calcul en UI
CALC_PATTERNS = {
    r"engine\.run\(": "Ex√©cution backtest",
    r"create_engine": "Cr√©ation engine",
    r"indicator_bank\.calculate": "Calcul indicateurs",
    r"sweep_engine\.run": "Ex√©cution sweep",
    r"\.fit\(": "Entra√Ænement ML",
    r"\.predict\(": "Pr√©diction ML",
    r"\.resample\(": "Transformation donn√©es",
    r"\.dropna\(": "Nettoyage donn√©es",
    r"\.fillna\(": "Imputation donn√©es",
}


def scan_file(filepath):
    """Scan un fichier pour imports/calculs m√©tier"""
    try:
        with open(filepath, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read()
            lines = content.split("\n")
    except Exception as e:
        print(f"Erreur lecture {filepath}: {e}")
        return {"imports": [], "calculations": [], "severity": "üü¢ VERT"}

    findings = {
        "imports": [],
        "calculations": [],
        "severity": "üü¢ VERT",
    }

    # Scan imports
    for line_num, line in enumerate(lines, 1):
        for module in DANGEROUS_MODULES:
            if re.search(rf"from {re.escape(module)}", line) or re.search(
                rf"import {re.escape(module)}", line
            ):
                findings["imports"].append(
                    {
                        "line": line_num,
                        "code": line.strip(),
                        "module": module,
                    }
                )

        for import_name, description in DANGEROUS_IMPORTS.items():
            if re.search(rf"\b{import_name}\b", line) and "import" in line:
                findings["imports"].append(
                    {
                        "line": line_num,
                        "code": line.strip(),
                        "name": import_name,
                        "desc": description,
                    }
                )

    # Scan calculs
    for line_num, line in enumerate(lines, 1):
        for pattern, description in CALC_PATTERNS.items():
            if re.search(pattern, line):
                findings["calculations"].append(
                    {
                        "line": line_num,
                        "code": line.strip(),
                        "pattern": pattern,
                        "desc": description,
                    }
                )

    # D√©terminer s√©v√©rit√©
    if findings["imports"] or findings["calculations"]:
        if len(findings["calculations"]) > 2 or len(findings["imports"]) > 3:
            findings["severity"] = "üî¥ CRITIQUE"
        elif findings["calculations"] or findings["imports"]:
            findings["severity"] = "üü° MOYEN"

    return findings


def scan_directory(path):
    """Scanner r√©cursivement un r√©pertoire pour fichiers Python"""
    results = {}

    if not path.exists():
        return results

    for py_file in path.rglob("*.py"):
        # Ignorer les fichiers de test et cache
        if any(part.startswith(".") or part == "__pycache__" for part in py_file.parts):
            continue
        if "test" in py_file.name or "conftest" in py_file.name:
            continue

        try:
            relative_path = py_file.relative_to(Path.cwd())
        except ValueError:
            relative_path = py_file
        findings = scan_file(py_file)

        if findings["imports"] or findings["calculations"]:
            results[str(relative_path)] = findings

    return results


def main():
    """Lancer audit complet"""
    print("üîç Audit ThreadX en cours...\n")

    all_findings = {}
    total_issues = 0
    files_scanned = 0

    # Scanner tous les r√©pertoires UI
    for ui_path in UI_PATHS:
        if ui_path.exists():
            print(f"üìÅ Scanning {ui_path}...")
            results = scan_directory(ui_path)
            all_findings.update(results)

            # Compter les fichiers
            for py_file in ui_path.rglob("*.py"):
                if not any(
                    part.startswith(".") or part == "__pycache__"
                    for part in py_file.parts
                ):
                    files_scanned += 1

    # Calculer totaux
    for filepath, findings in all_findings.items():
        issue_count = len(findings["imports"]) + len(findings["calculations"])
        total_issues += issue_count
        print(f"  ‚ùå {filepath}: {issue_count} issues ({findings['severity']})")

    # G√©n√©rer rapport
    report = generate_report(all_findings, total_issues, files_scanned)

    # Sauvegarder
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(report)

    print(f"\n‚úÖ Audit termin√©. Rapport : {OUTPUT_FILE}")
    print(
        f"üìä R√©sum√© : {total_issues} issues d√©tect√©es dans {len(all_findings)} fichiers"
    )
    print(f"üìÇ {files_scanned} fichiers Python analys√©s\n")


def generate_report(findings, total, files_scanned):
    """G√©n√©rer rapport Markdown"""
    md = f"""# üîç AUDIT THREADX : S√©paration UI / M√©tier

**Date** : {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Auditeur** : Script automatis√©
**Statut** : Audit complet

---

## üìä R√©sum√©

| M√©trique | Valeur |
|----------|--------|
| Fichiers Python analys√©s | {files_scanned} |
| Fichiers probl√©matiques | {len(findings)} |
| Issues totales | {total} |
| Imports m√©tier trouv√©s | {sum(len(f['imports']) for f in findings.values())} |
| Calculs en UI d√©tect√©s | {sum(len(f['calculations']) for f in findings.values())} |

**Priorit√© globale** : {"üî¥ CRITIQUE" if total > 10 else "üü° MOYENNE" if total > 0 else "üü¢ BASSE"}

---

## üìÅ D√©tail par fichier

"""

    # Trier par s√©v√©rit√©
    sorted_files = sorted(
        findings.items(),
        key=lambda x: (
            0
            if x[1]["severity"] == "üî¥ CRITIQUE"
            else 1 if x[1]["severity"] == "üü° MOYEN" else 2
        ),
    )

    for filepath, f in sorted_files:
        md += f"\n### {filepath}\n"
        md += f"**S√©v√©rit√©** : {f['severity']}\n\n"

        if f["imports"]:
            md += "**Imports m√©tier** :\n"
            for imp in f["imports"]:
                module_info = imp.get("module", imp.get("name", "unknown"))
                desc = imp.get("desc", "Import m√©tier")
                md += f"- L{imp['line']}: {imp['code']}\n"
                md += f"  ‚Üí *{desc}*\n"
            md += "\n"

        if f["calculations"]:
            md += "**Calculs d√©tect√©s** :\n"
            for calc in f["calculations"]:
                md += f"- L{calc['line']}: {calc['desc']}\n"
                md += f"  ```python\n  {calc['code']}\n  ```\n"
            md += "\n"

        # Actions recommand√©es
        md += "**Actions requises** :\n"
        if f["imports"]:
            md += "  1. [ ] Supprimer les imports m√©tier\n"
            md += "  2. [ ] Utiliser des appels bridge au lieu des imports directs\n"
        if f["calculations"]:
            md += "  3. [ ] Extraire la logique de calcul vers le moteur\n"
            md += "  4. [ ] Remplacer par des appels asynchrones via bridge\n"
        md += f"  5. [ ] Cr√©er les dataclasses de requ√™te appropri√©es\n\n"

        # Complexit√© estim√©e
        complexity_score = len(f["imports"]) + len(f["calculations"]) * 2
        complexity = (
            "üü¢ FAIBLE"
            if complexity_score < 3
            else "üü° MOYENNE" if complexity_score < 6 else "üî¥ HAUTE"
        )
        md += f"**Complexit√©** : {complexity}\n\n"

    md += f"\n---\n\n## üîß Extractions recommand√©es\n\n"

    extraction_count = 1
    for filepath, f in sorted_files:
        if f["calculations"]:
            for calc in f["calculations"]:
                md += f"### Extraction #{extraction_count} : {calc['desc']}\n\n"
                md += f"**Fichier source** : `{filepath}:{calc['line']}`\n\n"
                md += f"**Code probl√©matique** :\n"
                md += f"```python\n{calc['code']}\n```\n\n"
                md += f"**Action** : Extraire vers moteur de calcul + appel bridge\n\n"
                md += f"**Priorit√©** : {'üî¥ HAUTE' if f['severity'] == 'üî¥ CRITIQUE' else 'üü° MOYENNE'}\n\n"
                extraction_count += 1

    md += f"\n---\n\n## ‚úÖ Checklist de validation\n\n"
    md += f"""Apr√®s refactorisation, v√©rifier :

- [ ] Aucun `import create_engine` dans les fichiers UI
- [ ] Aucun `import IndicatorBank` dans les fichiers UI
- [ ] Aucun `import PerformanceCalculator` dans les fichiers UI
- [ ] Tous les appels m√©tier passent par self.bridge
- [ ] Tous les widgets UI restent dans les fichiers UI
- [ ] Tests unitaires UI passent (avec mocks bridge)
- [ ] Tests int√©gration Bridge ‚Üî Engine passent

---

## üöÄ Prochaines √©tapes

1. ‚úÖ **Audit complet** (TERMIN√â - ce prompt)
2. ‚è≥ **Cr√©er src/threadx/bridge/** (Prompt 2)
   - BacktestController
   - IndicatorController
   - DataController
   - ThreadXBridge (orchestrateur principal)
3. ‚è≥ **Refactoriser les fichiers UI** (Prompts 3-N)
   - Supprimer imports m√©tier
   - Ajouter appels bridge
   - Cr√©er dataclasses de requ√™te
4. ‚è≥ **Tests et validation**
   - Tests unitaires bridge
   - Tests int√©gration UI-Bridge-Engine
   - Validation fonctionnelle compl√®te

---

*Rapport g√©n√©r√© automatiquement le {datetime.now().strftime('%Y-%m-%d √† %H:%M:%S')}*
"""

    return md


if __name__ == "__main__":
    main()
