"""
Script de synchronisation automatique des donn√©es ThreadX
T√©l√©charge depuis le 1er janvier 2025 jusqu'√† hier
Utilise IngestionManager pour g√©rer les donn√©es
"""

import sys
import logging
from pathlib import Path
from datetime import datetime, timedelta
from typing import List

# Ajouter src au PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))

from threadx.data.ingest import IngestionManager
from threadx.data.registry import scan_symbols
from threadx.config import get_settings

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger(__name__)


def main():
    """Synchronisation automatique des donn√©es"""

    logger.info("=" * 80)
    logger.info("üöÄ SYNCHRONISATION AUTOMATIQUE ThreadX")
    logger.info("=" * 80)

    # Configuration
    settings = get_settings()
    manager = IngestionManager(settings)

    # P√©riode : 1er janvier 2025 ‚Üí hier
    start_date = datetime(2025, 1, 1)
    end_date = datetime.now() - timedelta(days=1)
    end_date = end_date.replace(hour=23, minute=59, second=59)

    logger.info(f"üìÖ P√©riode: {start_date.date()} ‚Üí {end_date.date()}")

    # Symboles √† synchroniser (USDC au lieu de USDT)
    default_symbols = [
        "BTCUSDC",
        "ETHUSDC",
        "BNBUSDC",
        "SOLUSDC",
        "XRPUSDC",
        "ADAUSDC",
        "AVAXUSDC",
        "DOTUSDC",
    ]

    logger.info(f"üéØ Symboles: {', '.join(default_symbols)}")

    # Timeframes
    timeframes = ["1h", "4h", "1d"]
    logger.info(f"‚è±Ô∏è  Timeframes: {', '.join(timeframes)}")

    # Statistiques
    total = len(default_symbols) * len(timeframes)
    success = 0
    failed = 0

    # Synchroniser chaque symbole/timeframe
    for i, symbol in enumerate(default_symbols, 1):
        for j, timeframe in enumerate(timeframes, 1):
            progress = ((i - 1) * len(timeframes) + j) / total * 100
            current = (i - 1) * len(timeframes) + j

            logger.info("")
            logger.info("=" * 60)
            logger.info(f"üìä Progression: {progress:.1f}% " f"({current}/{total})")
            logger.info(f"üîÑ Sync: {symbol} / {timeframe}")
            logger.info("=" * 60)

            try:
                # T√©l√©charger 1m truth
                logger.info(f"‚¨áÔ∏è  T√©l√©chargement 1m pour {symbol}")
                df_1m = manager.download_ohlcv_1m(
                    symbol=symbol,
                    start=start_date,
                    end=end_date,
                    force=False,  # Utilise cache local si disponible
                )

                if df_1m.empty:
                    logger.warning(f"‚ö†Ô∏è  Aucune donn√©e 1m pour {symbol}")
                    failed += 1
                    continue

                logger.info(f"‚úÖ T√©l√©charg√©: {len(df_1m):,} barres 1m")

                # Resample vers le timeframe cible
                if timeframe != "1m":
                    logger.info(f"üîÑ Resample 1m ‚Üí {timeframe}")
                    df_tf = manager.resample_from_1m(
                        symbol=symbol,
                        target_tf=timeframe,
                        start=start_date,
                        end=end_date,
                    )

                    if df_tf.empty:
                        logger.warning(f"‚ö†Ô∏è  √âchec resample vers {timeframe}")
                        failed += 1
                        continue

                    logger.info(f"‚úÖ Resampled: {len(df_tf):,} barres {timeframe}")

                success += 1
                logger.info(f"‚úÖ Synchronisation OK: {symbol}/{timeframe}")

            except Exception as e:
                logger.error(f"‚ùå Erreur {symbol}/{timeframe}: {e}")
                failed += 1

    # R√©sum√© final
    logger.info("")
    logger.info("=" * 80)
    logger.info("üìä R√âSUM√â")
    logger.info("=" * 80)
    logger.info(f"‚úÖ R√©ussies: {success}/{total}")
    logger.info(f"‚ùå √âchou√©es: {failed}/{total}")
    logger.info(f"üìÖ P√©riode: {start_date.date()} ‚Üí {end_date.date()}")

    # Afficher les stats de l'ingestion
    stats = manager.session_stats
    logger.info("")
    logger.info("üìà Statistiques de session:")
    logger.info(f"  - Symboles trait√©s: {stats['symbols_processed']}")
    logger.info(f"  - Fichiers t√©l√©charg√©s: {stats['files_downloaded']}")
    logger.info(f"  - Fichiers resampl√©s: {stats['files_resampled']}")
    logger.info(f"  - Gaps combl√©s: {stats['gaps_filled']}")
    logger.info(f"  - Avertissements: {stats['verification_warnings']}")
    logger.info("=" * 80)
    logger.info("üéâ SYNCHRONISATION TERMIN√âE")
    logger.info("=" * 80)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  Interruption utilisateur")
        sys.exit(130)
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        import traceback

        logger.error(traceback.format_exc())
        sys.exit(1)
