"""
ThreadX Parametric Optimization UI Module
=========================================

Interface utilisateur pour l'optimisation param√©trique unifi√©e.
Utilise le moteur UnifiedOptimizationEngine qui centralise tous les calculs via IndicatorBank.

Author: ThreadX Framework
Version: Phase 10 - Unified Compute Engine
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import json
import threading
import time
from pathlib import Path
from typing import Dict, Optional, Any
import pandas as pd
import numpy as np

from threadx.optimization.engine import UnifiedOptimizationEngine, DEFAULT_SWEEP_CONFIG
from threadx.indicators.bank import IndicatorBank
from threadx.utils.log import get_logger

logger = get_logger(__name__)


class ParametricOptimizationUI:
    """Interface d'optimisation param√©trique utilisant le moteur unifi√©."""

    def __init__(
        self, parent: tk.Widget, indicator_bank: Optional[IndicatorBank] = None
    ):
        """
        Initialise l'interface d'optimisation.

        Args:
            parent: Widget parent pour l'interface
            indicator_bank: Instance IndicatorBank partag√©e (recommand√©)
        """
        self.parent = parent
        self.indicator_bank = indicator_bank or IndicatorBank()

        # Moteur d'optimisation unifi√©
        self.optimization_engine = UnifiedOptimizationEngine(
            indicator_bank=self.indicator_bank, max_workers=4
        )

        # √âtat de l'interface
        self.current_data: Optional[pd.DataFrame] = None
        self.current_results: Optional[pd.DataFrame] = None
        self.optimization_thread: Optional[threading.Thread] = None
        self.is_running = False

        # Configuration par d√©faut
        self.config = DEFAULT_SWEEP_CONFIG.copy()

        # Interface utilisateur
        self.setup_ui()

        logger.info("ParametricOptimizationUI initialis√© avec moteur unifi√©")

    def setup_ui(self):
        """Construit l'interface utilisateur."""
        # Frame principal
        self.main_frame = ttk.Frame(self.parent)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # Section configuration
        self.create_config_section()

        # Section contr√¥les
        self.create_controls_section()

        # Section progress
        self.create_progress_section()

        # Section r√©sultats
        self.create_results_section()

    def create_config_section(self):
        """Cr√©e la section de configuration."""
        config_frame = ttk.LabelFrame(
            self.main_frame, text="üìä Configuration du Sweep", padding=10
        )
        config_frame.pack(fill=tk.X, padx=5, pady=5)

        # Dataset configuration
        dataset_frame = ttk.Frame(config_frame)
        dataset_frame.pack(fill=tk.X, pady=5)

        ttk.Label(dataset_frame, text="Dataset:").pack(side=tk.LEFT)

        self.symbol_var = tk.StringVar(value=self.config["dataset"]["symbol"])
        symbol_combo = ttk.Combobox(
            dataset_frame,
            textvariable=self.symbol_var,
            values=["BTCUSDC", "ETHUSDC", "ADAUSDC"],
            width=12,
        )
        symbol_combo.pack(side=tk.LEFT, padx=5)

        self.timeframe_var = tk.StringVar(value=self.config["dataset"]["timeframe"])
        tf_combo = ttk.Combobox(
            dataset_frame,
            textvariable=self.timeframe_var,
            values=["15m", "1h", "4h", "1d"],
            width=8,
        )
        tf_combo.pack(side=tk.LEFT, padx=5)

        ttk.Button(
            dataset_frame, text="üìÅ Charger Donn√©es", command=self.load_data
        ).pack(side=tk.LEFT, padx=10)

        self.data_status = ttk.Label(dataset_frame, text="‚ùå Aucune donn√©e")
        self.data_status.pack(side=tk.LEFT, padx=10)

        # Parameter grid configuration
        self.create_parameter_grid_config(config_frame)

    def create_parameter_grid_config(self, parent):
        """Cr√©e la configuration de grille de param√®tres."""
        grid_frame = ttk.LabelFrame(parent, text="üéõÔ∏è Grille de Param√®tres", padding=5)
        grid_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        # Notebook pour les diff√©rents indicateurs
        self.param_notebook = ttk.Notebook(grid_frame)
        self.param_notebook.pack(fill=tk.BOTH, expand=True)

        # Onglet Bollinger Bands
        self.create_bollinger_tab()

        # Onglet ATR
        self.create_atr_tab()

        # Contr√¥les de configuration
        config_controls = ttk.Frame(grid_frame)
        config_controls.pack(fill=tk.X, pady=5)

        ttk.Button(
            config_controls, text="üíæ Sauver Config", command=self.save_config
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            config_controls, text="üìÇ Charger Config", command=self.load_config
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(config_controls, text="üîÑ Reset", command=self.reset_config).pack(
            side=tk.LEFT, padx=5
        )

    def create_bollinger_tab(self):
        """Cr√©e l'onglet de configuration Bollinger Bands."""
        bb_frame = ttk.Frame(self.param_notebook)
        self.param_notebook.add(bb_frame, text="Bollinger Bands")

        # Enable/Disable
        self.bb_enabled = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            bb_frame, text="Activer Bollinger Bands", variable=self.bb_enabled
        ).pack(anchor=tk.W, pady=5)

        # Period configuration
        period_frame = ttk.Frame(bb_frame)
        period_frame.pack(fill=tk.X, pady=5)

        ttk.Label(period_frame, text="P√©riode:").pack(side=tk.LEFT)
        self.bb_period_values = tk.StringVar(value="10,15,20,25,30")
        ttk.Entry(period_frame, textvariable=self.bb_period_values, width=30).pack(
            side=tk.LEFT, padx=5
        )

        # Standard deviation configuration
        std_frame = ttk.Frame(bb_frame)
        std_frame.pack(fill=tk.X, pady=5)

        ttk.Label(std_frame, text="√âcart-type - Start:").pack(side=tk.LEFT)
        self.bb_std_start = tk.StringVar(value="1.5")
        ttk.Entry(std_frame, textvariable=self.bb_std_start, width=8).pack(
            side=tk.LEFT, padx=2
        )

        ttk.Label(std_frame, text="Stop:").pack(side=tk.LEFT, padx=(10, 0))
        self.bb_std_stop = tk.StringVar(value="3.0")
        ttk.Entry(std_frame, textvariable=self.bb_std_stop, width=8).pack(
            side=tk.LEFT, padx=2
        )

        ttk.Label(std_frame, text="Step:").pack(side=tk.LEFT, padx=(10, 0))
        self.bb_std_step = tk.StringVar(value="0.1")
        ttk.Entry(std_frame, textvariable=self.bb_std_step, width=8).pack(
            side=tk.LEFT, padx=2
        )

    def create_atr_tab(self):
        """Cr√©e l'onglet de configuration ATR."""
        atr_frame = ttk.Frame(self.param_notebook)
        self.param_notebook.add(atr_frame, text="ATR")

        # Enable/Disable
        self.atr_enabled = tk.BooleanVar(value=True)
        ttk.Checkbutton(atr_frame, text="Activer ATR", variable=self.atr_enabled).pack(
            anchor=tk.W, pady=5
        )

        # Period configuration
        period_frame = ttk.Frame(atr_frame)
        period_frame.pack(fill=tk.X, pady=5)

        ttk.Label(period_frame, text="P√©riode - Start:").pack(side=tk.LEFT)
        self.atr_period_start = tk.StringVar(value="10")
        ttk.Entry(period_frame, textvariable=self.atr_period_start, width=8).pack(
            side=tk.LEFT, padx=2
        )

        ttk.Label(period_frame, text="Stop:").pack(side=tk.LEFT, padx=(10, 0))
        self.atr_period_stop = tk.StringVar(value="30")
        ttk.Entry(period_frame, textvariable=self.atr_period_stop, width=8).pack(
            side=tk.LEFT, padx=2
        )

        ttk.Label(period_frame, text="Step:").pack(side=tk.LEFT, padx=(10, 0))
        self.atr_period_step = tk.StringVar(value="2")
        ttk.Entry(period_frame, textvariable=self.atr_period_step, width=8).pack(
            side=tk.LEFT, padx=2
        )

        # Method configuration
        method_frame = ttk.Frame(atr_frame)
        method_frame.pack(fill=tk.X, pady=5)

        ttk.Label(method_frame, text="M√©thodes:").pack(side=tk.LEFT)
        self.atr_methods = tk.StringVar(value="ema,sma")
        ttk.Entry(method_frame, textvariable=self.atr_methods, width=20).pack(
            side=tk.LEFT, padx=5
        )

    def create_controls_section(self):
        """Cr√©e la section de contr√¥les."""
        controls_frame = ttk.LabelFrame(
            self.main_frame, text="üéÆ Contr√¥les", padding=10
        )
        controls_frame.pack(fill=tk.X, padx=5, pady=5)

        # Boutons principaux
        self.start_button = ttk.Button(
            controls_frame,
            text="üöÄ D√©marrer Sweep",
            command=self.start_optimization,
            style="Accent.TButton",
        )
        self.start_button.pack(side=tk.LEFT, padx=5)

        self.pause_button = ttk.Button(
            controls_frame,
            text="‚è∏Ô∏è Pause",
            command=self.pause_optimization,
            state=tk.DISABLED,
        )
        self.pause_button.pack(side=tk.LEFT, padx=5)

        self.stop_button = ttk.Button(
            controls_frame,
            text="‚èπÔ∏è Stop",
            command=self.stop_optimization,
            state=tk.DISABLED,
        )
        self.stop_button.pack(side=tk.LEFT, padx=5)

        # Configuration des workers
        ttk.Label(controls_frame, text="Workers:").pack(side=tk.LEFT, padx=(20, 5))
        self.workers_var = tk.IntVar(value=4)
        workers_spin = tk.Spinbox(
            controls_frame, from_=1, to=16, width=5, textvariable=self.workers_var
        )
        workers_spin.pack(side=tk.LEFT, padx=5)

        # Statut du moteur
        self.engine_status = ttk.Label(controls_frame, text="üíæ Cache: 0 entries")
        self.engine_status.pack(side=tk.RIGHT, padx=10)

    def create_progress_section(self):
        """Cr√©e la section de progression."""
        progress_frame = ttk.LabelFrame(
            self.main_frame, text="üìà Progression", padding=10
        )
        progress_frame.pack(fill=tk.X, padx=5, pady=5)

        # Barre de progression
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            progress_frame, variable=self.progress_var, maximum=100, length=400
        )
        self.progress_bar.pack(fill=tk.X, pady=5)

        # Labels de statut
        status_frame = ttk.Frame(progress_frame)
        status_frame.pack(fill=tk.X)

        self.status_label = ttk.Label(status_frame, text="Pr√™t √† d√©marrer")
        self.status_label.pack(side=tk.LEFT)

        self.eta_label = ttk.Label(status_frame, text="")
        self.eta_label.pack(side=tk.RIGHT)

    def create_results_section(self):
        """Cr√©e la section des r√©sultats."""
        results_frame = ttk.LabelFrame(self.main_frame, text="üèÜ R√©sultats", padding=5)
        results_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # Contr√¥les des r√©sultats
        results_controls = ttk.Frame(results_frame)
        results_controls.pack(fill=tk.X, pady=5)

        ttk.Button(
            results_controls, text="üíæ Exporter CSV", command=self.export_results
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            results_controls, text="üìä Visualiser", command=self.visualize_results
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            results_controls, text="üîç Analyser Top", command=self.analyze_top_results
        ).pack(side=tk.LEFT, padx=5)

        # Tableau des r√©sultats
        self.create_results_tree(results_frame)

    def create_results_tree(self, parent):
        """Cr√©e le tableau des r√©sultats."""
        # Frame avec scrollbars
        tree_frame = ttk.Frame(parent)
        tree_frame.pack(fill=tk.BOTH, expand=True)

        # Treeview
        columns = (
            "rank",
            "indicator",
            "params",
            "pnl",
            "sharpe",
            "drawdown",
            "trades",
            "winrate",
        )
        self.results_tree = ttk.Treeview(
            tree_frame, columns=columns, show="headings", height=15
        )

        # Headers
        self.results_tree.heading("rank", text="Rang")
        self.results_tree.heading("indicator", text="Indicateur")
        self.results_tree.heading("params", text="Param√®tres")
        self.results_tree.heading("pnl", text="PnL")
        self.results_tree.heading("sharpe", text="Sharpe")
        self.results_tree.heading("drawdown", text="MaxDD")
        self.results_tree.heading("trades", text="Trades")
        self.results_tree.heading("winrate", text="Win%")

        # Column widths
        self.results_tree.column("rank", width=50, anchor=tk.CENTER)
        self.results_tree.column("indicator", width=100, anchor=tk.CENTER)
        self.results_tree.column("params", width=200, anchor=tk.W)
        self.results_tree.column("pnl", width=80, anchor=tk.E)
        self.results_tree.column("sharpe", width=70, anchor=tk.E)
        self.results_tree.column("drawdown", width=80, anchor=tk.E)
        self.results_tree.column("trades", width=70, anchor=tk.E)
        self.results_tree.column("winrate", width=70, anchor=tk.E)

        # Scrollbars
        v_scrollbar = ttk.Scrollbar(
            tree_frame, orient=tk.VERTICAL, command=self.results_tree.yview
        )
        h_scrollbar = ttk.Scrollbar(
            tree_frame, orient=tk.HORIZONTAL, command=self.results_tree.xview
        )
        self.results_tree.configure(
            yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set
        )

        # Grid layout
        self.results_tree.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")

        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)

    def load_data(self):
        """Charge les donn√©es pour l'optimisation."""
        try:
            # Pour l'instant, on utilise des donn√©es de test
            # En production, ceci chargerait depuis les donn√©es r√©elles
            symbol = self.symbol_var.get()
            timeframe = self.timeframe_var.get()

            # Simulation de donn√©es OHLCV
            dates = pd.date_range("2024-01-01", "2024-12-31", freq="1H")[:1000]
            np.random.seed(42)

            data = pd.DataFrame(
                {
                    "timestamp": dates,
                    "open": 50000 + np.random.randn(len(dates)).cumsum() * 100,
                    "high": 0,
                    "low": 0,
                    "close": 0,
                    "volume": np.random.randint(100, 1000, len(dates)),
                }
            )

            # Calcul OHLC basique
            data["close"] = data["open"] + np.random.randn(len(dates)) * 50
            data["high"] = (
                np.maximum(data["open"], data["close"])
                + np.random.rand(len(dates)) * 100
            )
            data["low"] = (
                np.minimum(data["open"], data["close"])
                - np.random.rand(len(dates)) * 100
            )

            data = data.set_index("timestamp")

            self.current_data = data
            self.data_status.config(text=f"‚úÖ {len(data)} barres charg√©es")

            logger.info(f"Donn√©es charg√©es: {symbol} {timeframe} - {len(data)} barres")

        except Exception as e:
            logger.error(f"Erreur chargement donn√©es: {e}")
            messagebox.showerror("Erreur", f"Impossible de charger les donn√©es: {e}")

    def build_config_from_ui(self) -> Dict:
        """Construit la configuration √† partir de l'interface."""
        config = {
            "dataset": {
                "symbol": self.symbol_var.get(),
                "timeframe": self.timeframe_var.get(),
                "start": "2024-01-01",
                "end": "2024-12-31",
            },
            "grid": {},
            "scoring": {
                "primary": "pnl",
                "secondary": ["sharpe", "-max_drawdown"],
                "top_k": 50,
            },
        }

        # Bollinger Bands
        if self.bb_enabled.get():
            try:
                periods = [
                    int(x.strip()) for x in self.bb_period_values.get().split(",")
                ]
                config["grid"]["bollinger"] = {
                    "period": periods,
                    "std": {
                        "start": float(self.bb_std_start.get()),
                        "stop": float(self.bb_std_stop.get()),
                        "step": float(self.bb_std_step.get()),
                    },
                }
            except ValueError as e:
                logger.error(f"Erreur config Bollinger: {e}")

        # ATR
        if self.atr_enabled.get():
            try:
                methods = [x.strip() for x in self.atr_methods.get().split(",")]
                config["grid"]["atr"] = {
                    "period": {
                        "start": int(self.atr_period_start.get()),
                        "stop": int(self.atr_period_stop.get()),
                        "step": int(self.atr_period_step.get()),
                    },
                    "method": methods,
                }
            except ValueError as e:
                logger.error(f"Erreur config ATR: {e}")

        return config

    def start_optimization(self):
        """D√©marre l'optimisation param√©trique."""
        if not self.current_data is not None:
            messagebox.showwarning("Attention", "Veuillez d'abord charger des donn√©es")
            return

        if self.is_running:
            messagebox.showwarning("Attention", "Une optimisation est d√©j√† en cours")
            return

        try:
            # Configuration
            self.config = self.build_config_from_ui()

            # Mise √† jour du moteur
            self.optimization_engine.max_workers = self.workers_var.get()
            self.optimization_engine.progress_callback = self.update_progress

            # Thread d'optimisation
            self.optimization_thread = threading.Thread(
                target=self._run_optimization_thread, daemon=True
            )

            # Interface
            self.is_running = True
            self.start_button.config(state=tk.DISABLED)
            self.pause_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.NORMAL)

            # D√©marrage
            self.optimization_thread.start()

            logger.info("Optimisation param√©trique d√©marr√©e")

        except Exception as e:
            logger.error(f"Erreur d√©marrage optimisation: {e}")
            messagebox.showerror(
                "Erreur", f"Impossible de d√©marrer l'optimisation: {e}"
            )
            self._reset_ui_state()

    def _run_optimization_thread(self):
        """Thread d'ex√©cution de l'optimisation."""
        try:
            if self.current_data is None:
                raise ValueError("Aucune donn√©e charg√©e")

            results = self.optimization_engine.run_parameter_sweep(
                self.config, self.current_data
            )

            # Mise √† jour des r√©sultats dans le thread principal
            self.parent.after(0, lambda: self._optimization_completed(results))

        except Exception as e:
            logger.error(f"Erreur dans le thread d'optimisation: {e}")
            self.parent.after(0, lambda: self._optimization_failed(str(e)))

    def _optimization_completed(self, results: pd.DataFrame):
        """Callback quand l'optimisation est termin√©e."""
        self.current_results = results
        self._populate_results_tree(results)
        self._reset_ui_state()

        # Statistiques
        stats = self.optimization_engine.get_indicator_bank_stats()
        self.engine_status.config(
            text=f"üíæ Cache: {stats.get('cache_size', 0)} entries"
        )

        messagebox.showinfo(
            "Succ√®s", f"Optimisation termin√©e!\n{len(results)} r√©sultats obtenus"
        )
        logger.info(f"Optimisation termin√©e: {len(results)} r√©sultats")

    def _optimization_failed(self, error: str):
        """Callback quand l'optimisation √©choue."""
        self._reset_ui_state()
        messagebox.showerror("Erreur", f"L'optimisation a √©chou√©: {error}")
        logger.error(f"Optimisation √©chou√©e: {error}")

    def _reset_ui_state(self):
        """Remet l'interface √† l'√©tat initial."""
        self.is_running = False
        self.start_button.config(state=tk.NORMAL)
        self.pause_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.DISABLED)
        self.progress_var.set(0)
        self.status_label.config(text="Pr√™t √† d√©marrer")
        self.eta_label.config(text="")

    def _populate_results_tree(self, results: pd.DataFrame):
        """Peuple le tableau des r√©sultats."""
        # Vider le tableau
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)

        if results.empty:
            return

        # Ajouter les r√©sultats
        for _, row in results.head(100).iterrows():  # Top 100
            # Format des param√®tres
            params_str = ""
            for col in row.index:
                if col not in [
                    "rank",
                    "indicator_type",
                    "pnl",
                    "sharpe",
                    "max_drawdown",
                    "profit_factor",
                    "total_trades",
                    "win_rate",
                    "duration_sec",
                ]:
                    params_str += f"{col}={row[col]:.2f if isinstance(row[col], float) else row[col]} "

            values = (
                int(row.get("rank", 0)),
                row.get("indicator_type", ""),
                params_str.strip(),
                f"{row.get('pnl', 0):.2f}",
                f"{row.get('sharpe', 0):.3f}",
                f"{row.get('max_drawdown', 0):.3f}",
                int(row.get("total_trades", 0)),
                f"{row.get('win_rate', 0)*100:.1f}%",
            )

            self.results_tree.insert("", tk.END, values=values)

    def update_progress(
        self, progress: float, completed: int, total: int, eta: Optional[float]
    ):
        """Callback de mise √† jour de la progression."""
        self.progress_var.set(progress * 100)
        self.status_label.config(text=f"Progression: {completed}/{total}")

        if eta:
            eta_str = f"ETA: {eta/60:.1f}min" if eta > 60 else f"ETA: {eta:.0f}s"
            self.eta_label.config(text=eta_str)

    def pause_optimization(self):
        """Met en pause/reprend l'optimisation."""
        if self.optimization_engine.should_pause:
            self.optimization_engine.resume()
            self.pause_button.config(text="‚è∏Ô∏è Pause")
        else:
            self.optimization_engine.pause()
            self.pause_button.config(text="‚ñ∂Ô∏è Reprendre")

    def stop_optimization(self):
        """Arr√™te l'optimisation."""
        self.optimization_engine.stop()
        if self.optimization_thread and self.optimization_thread.is_alive():
            self.optimization_thread.join(timeout=1.0)
        self._reset_ui_state()

    def save_config(self):
        """Sauvegarde la configuration."""
        try:
            config = self.build_config_from_ui()
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            )
            if filename:
                with open(filename, "w") as f:
                    json.dump(config, f, indent=2)
                messagebox.showinfo("Succ√®s", "Configuration sauvegard√©e")
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de sauvegarder: {e}")

    def load_config(self):
        """Charge une configuration."""
        try:
            filename = filedialog.askopenfilename(
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            if filename:
                with open(filename, "r") as f:
                    config = json.load(f)
                self._apply_config_to_ui(config)
                messagebox.showinfo("Succ√®s", "Configuration charg√©e")
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de charger: {e}")

    def _apply_config_to_ui(self, config: Dict):
        """Applique une configuration √† l'interface."""
        # Dataset
        if "dataset" in config:
            self.symbol_var.set(config["dataset"].get("symbol", "BTCUSDC"))
            self.timeframe_var.set(config["dataset"].get("timeframe", "1h"))

        # Grid
        if "grid" in config:
            # Bollinger
            if "bollinger" in config["grid"]:
                bb_config = config["grid"]["bollinger"]
                self.bb_enabled.set(True)
                if "period" in bb_config:
                    self.bb_period_values.set(",".join(map(str, bb_config["period"])))
                if "std" in bb_config:
                    std_config = bb_config["std"]
                    self.bb_std_start.set(str(std_config.get("start", 1.5)))
                    self.bb_std_stop.set(str(std_config.get("stop", 3.0)))
                    self.bb_std_step.set(str(std_config.get("step", 0.1)))

            # ATR
            if "atr" in config["grid"]:
                atr_config = config["grid"]["atr"]
                self.atr_enabled.set(True)
                if "period" in atr_config:
                    period_config = atr_config["period"]
                    self.atr_period_start.set(str(period_config.get("start", 10)))
                    self.atr_period_stop.set(str(period_config.get("stop", 30)))
                    self.atr_period_step.set(str(period_config.get("step", 2)))
                if "method" in atr_config:
                    self.atr_methods.set(",".join(atr_config["method"]))

    def reset_config(self):
        """Remet la configuration par d√©faut."""
        self._apply_config_to_ui(DEFAULT_SWEEP_CONFIG)

    def export_results(self):
        """Exporte les r√©sultats en CSV."""
        if self.current_results is None or self.current_results.empty:
            messagebox.showwarning("Attention", "Aucun r√©sultat √† exporter")
            return

        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
            )
            if filename:
                self.current_results.to_csv(filename, index=False)
                messagebox.showinfo("Succ√®s", f"R√©sultats export√©s: {filename}")
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d'exporter: {e}")

    def visualize_results(self):
        """Lance la visualisation des r√©sultats."""
        if self.current_results is None or self.current_results.empty:
            messagebox.showwarning("Attention", "Aucun r√©sultat √† visualiser")
            return

        # TODO: Impl√©menter la visualisation
        messagebox.showinfo("Info", "Visualisation √† impl√©menter")

    def analyze_top_results(self):
        """Analyse les meilleurs r√©sultats."""
        if self.current_results is None or self.current_results.empty:
            messagebox.showwarning("Attention", "Aucun r√©sultat √† analyser")
            return

        # TODO: Impl√©menter l'analyse
        messagebox.showinfo("Info", "Analyse d√©taill√©e √† impl√©menter")


def create_optimization_ui(
    parent: tk.Widget, indicator_bank: Optional[IndicatorBank] = None
) -> ParametricOptimizationUI:
    """
    Factory function pour cr√©er l'interface d'optimisation.

    Args:
        parent: Widget parent
        indicator_bank: Instance IndicatorBank partag√©e

    Returns:
        ParametricOptimizationUI configur√©e
    """
    return ParametricOptimizationUI(parent, indicator_bank)
